{"version":3,"sources":["../../../../server/api/v1/helpers/questions.js"],"names":["questionsDB","db","questions","Questions","data","meetupIdString","meetup","title","body","meetupId","parseInt","foundMeetup","meetups","find","id","Error","length","currentUser","question","Math","random","createdOn","Date","createdBy","currentMeetup","votes","push","idString","obj","deleted","index","splice"],"mappings":"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","sourcesContent":["import db from '../../../db/v1/db';\r\nimport { currentUser } from '../controllers/usersController';\r\nimport { currentMeetup } from '../controllers/meetupsController';\r\n\r\nconst questionsDB = db.questions;\r\n\r\n\r\nclass Questions {\r\n  /**\r\n   * Create question and push to db\r\n   * @param {Object} data - question input\r\n   * @returns {Object} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static createQuestion(data) {\r\n    const { meetup: meetupIdString, title, body } = data;\r\n    const meetupId = parseInt(meetupIdString, 10);\r\n    const foundMeetup = db.meetups.find(meetup => meetup.id === meetupId);\r\n    if (!foundMeetup) throw new Error('meetup not found');\r\n\r\n    if (!title || title.length < 10) throw new Error('invalid input');\r\n\r\n    if (!currentUser) throw new Error('create account/login first');\r\n\r\n    const question = {\r\n      id: parseInt(Math.random() * 1000000, 10),\r\n      createdOn: new Date(),\r\n      createdBy: currentUser.id,\r\n      meetup: meetupId || currentMeetup.id,\r\n    };\r\n\r\n    question.title = title;\r\n    question.body = body;\r\n    question.votes = 0;\r\n    questionsDB.push(question);\r\n    return question;\r\n  }\r\n\r\n  /**\r\n   * Get all questions in db\r\n   * @param {Object} idString - question input\r\n   * @returns {Array} - all question objects in db\r\n   */\r\n  static getQuestions() {\r\n    return questionsDB;\r\n  }\r\n\r\n  /**\r\n   * Get a question in db\r\n   * @param {Object} idString - question input\r\n   * @returns {Object} - on success\r\n   * @returns {undefined} - on failure\r\n   */\r\n  static getQuestion(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const question = questionsDB.find(obj => obj.id === id);\r\n    return question;\r\n  }\r\n\r\n  /**\r\n   * Update existing question and push to db\r\n   * @param {Object} idString - question input\r\n   * @param {Object} data - question input\r\n   * @returns {Object} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static updateQuestion(idString, data) {\r\n    const id = parseInt(idString, 10);\r\n    const { title, body } = data;\r\n    if (!title) throw new Error('invalid input');\r\n\r\n    const question = questionsDB.find(obj => obj.id === id);\r\n    question.title = title;\r\n    question.body = body;\r\n    return question;\r\n  }\r\n\r\n  /**\r\n   * delete existing question\r\n   * @param {Object} idString - question input\r\n   * @param {Object} data - question input\r\n   * @returns {Object} - on success\r\n   * @returns {undefined} - on failure\r\n   */\r\n  static deleteQuestion(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const deleted = questionsDB.find((question, index) => {\r\n      if (question.id === id) questionsDB.splice(index, 1);\r\n      return question.id === id;\r\n    });\r\n\r\n    return deleted;\r\n  }\r\n\r\n  /**\r\n   * Increment the votes of an existing question\r\n   * @param {Object} idString - question input\r\n   * @returns {Object} - on success\r\n   * @returns {undefined} - on failure\r\n   */\r\n  static upvoteQuestion(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const question = questionsDB.find(obj => obj.id === id);\r\n    question.votes += 1;\r\n    return question;\r\n  }\r\n\r\n  /**\r\n   * Decrement the votes of an existing question\r\n   * @param {Object} idString - question input\r\n   * @returns {Object} - on success\r\n   * @returns {undefined} - on failure\r\n   */\r\n  static downvoteQuestion(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const question = questionsDB.find(obj => obj.id === id);\r\n    question.votes -= 1;\r\n    return question;\r\n  }\r\n}\r\n\r\nexport default Questions;\r\n"],"file":"questions.js"}