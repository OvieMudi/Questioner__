{"version":3,"sources":["../../../../server/api/v1/helpers/meetups.js"],"names":["meetupsDB","db","meetups","Meetups","data","meetup","id","parseInt","Math","random","createdOn","Date","propNames","Object","keys","meetupModel","forEach","propName","Error","images","validateImages","tags","validateTags","happeningOn","setHappeningOn","length","push","getMeetup","upcoming","filter","idString","find","obj","deleted","index","splice","imagesArray","error","Array","some","image","tagsArray","every","tag","dateString","getDate"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,YAAGC,OAArB;;IAEMC,O;;;;;;;;;;AACJ;;;;;;;iCAOoBC,I,EAAM;AACxB,UAAMC,MAAM,GAAG;AACbC,QAAAA,EAAE,EAAEC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAgB,OAAjB,EAA0B,EAA1B,CADC;AAEbC,QAAAA,SAAS,EAAE,IAAIC,IAAJ;AAFE,OAAf;AAIA,UAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYC,eAAZ,CAAlB;AACAH,MAAAA,SAAS,CAACI,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC9B,YAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,WAAtC,EAAmD,OADrB,CAC6B;;AAC3D,YAAI,CAACb,IAAI,CAACa,QAAD,CAAL,IAAmBA,QAAQ,KAAK,QAApC,EAA8C;AAAE;AAC9C,gBAAMC,KAAK,WAAID,QAAJ,uBAAX;AACD;;AACD,YAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACzB,cAAME,MAAM,GAAGhB,OAAO,CAACiB,cAAR,CAAuBhB,IAAI,CAACa,QAAD,CAA3B,CAAf;AACAZ,UAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBE,MAAnB;AACA;AACD;;AACD,YAAIF,QAAQ,KAAK,MAAjB,EAAyB;AACvB,cAAMI,IAAI,GAAGlB,OAAO,CAACmB,YAAR,CAAqBlB,IAAI,CAACa,QAAD,CAAzB,CAAb;AACAZ,UAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBI,IAAnB;AACA;AACD;;AACD,YAAIJ,QAAQ,KAAK,aAAjB,EAAgC;AAC9B,cAAMM,WAAW,GAAGpB,OAAO,CAACqB,cAAR,CAAuBpB,IAAI,CAACa,QAAD,CAA3B,CAApB;AACAZ,UAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBM,WAAnB;AACA;AACD;;AACD,YAAInB,IAAI,CAACa,QAAD,CAAJ,CAAeQ,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,gBAAMP,KAAK,mBAAYD,QAAZ,EAAX;AACD;;AACDZ,QAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBb,IAAI,CAACa,QAAD,CAAvB;AACD,OAxBD,EANwB,CA8BpB;;AACJjB,MAAAA,SAAS,CAAC0B,IAAV,CAAerB,MAAf;AACA,aAAOF,OAAO,CAACwB,SAAR,CAAkBtB,MAAM,CAACC,EAAzB,CAAP;AACD;AAED;;;;;;;iCAIoB;AAClB,aAAON,SAAP;AACD;AAED;;;;;;;yCAI4B;AAC1B,UAAM4B,QAAQ,GAAG5B,SAAS,CAAC6B,MAAV,CAAiB,UAAAxB,MAAM;AAAA,eAAIA,MAAM,CAACkB,WAAP,GAAqB,IAAIZ,IAAJ,EAAzB;AAAA,OAAvB,CAAjB;AACA,aAAOiB,QAAP;AACD;AAED;;;;;;;;;;8BAOiBE,Q,EAAU;AACzB,UAAMxB,EAAE,GAAGC,QAAQ,CAACuB,QAAD,EAAW,EAAX,CAAnB;AACA,UAAMzB,MAAM,GAAGL,SAAS,CAAC+B,IAAV,CAAe,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAAC1B,EAAJ,KAAWA,EAAf;AAAA,OAAlB,CAAf;AACA,aAAOD,MAAP;AACD;AAED;;;;;;;;;;iCAOoByB,Q,EAAU1B,I,EAAM;AAClC,UAAME,EAAE,GAAGC,QAAQ,CAACuB,QAAD,EAAW,EAAX,CAAnB;AACA,UAAMzB,MAAM,GAAGL,SAAS,CAAC+B,IAAV,CAAe,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAAC1B,EAAJ,KAAWA,EAAf;AAAA,OAAlB,CAAf;AACA,UAAMM,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYV,IAAZ,CAAlB;AACAQ,MAAAA,SAAS,CAACI,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC9B,YAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,WAAtC,EAAmD,OADrB,CAC6B;;AAC3D,YAAI,CAACb,IAAI,CAACa,QAAD,CAAL,IAAmBA,QAAQ,KAAK,QAApC,EAA8C,OAFhB,CAEwB;;AACtD,YAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACzB,cAAME,MAAM,GAAGhB,OAAO,CAACiB,cAAR,CAAuBhB,IAAI,CAACa,QAAD,CAA3B,CAAf;AACAZ,UAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBE,MAAnB;AACA;AACD;;AACD,YAAIF,QAAQ,KAAK,MAAjB,EAAyB;AACvB,cAAMI,IAAI,GAAGlB,OAAO,CAACmB,YAAR,CAAqBlB,IAAI,CAACa,QAAD,CAAzB,CAAb;AACAZ,UAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBI,IAAnB;AACA;AACD;;AACD,YAAIJ,QAAQ,KAAK,aAAjB,EAAgC;AAC9B,cAAMM,WAAW,GAAGpB,OAAO,CAACqB,cAAR,CAAuBpB,IAAI,CAACa,QAAD,CAA3B,CAApB;AACAZ,UAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBM,WAAnB;AACA;AACD;;AACD,YAAInB,IAAI,CAACa,QAAD,CAAJ,CAAeQ,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,gBAAMP,KAAK,mBAAYD,QAAZ,EAAX;AACD;;AACDZ,QAAAA,MAAM,CAACY,QAAD,CAAN,GAAmBb,IAAI,CAACa,QAAD,CAAvB;AACD,OAtBD,EAJkC,CA0B9B;;AACJ,aAAOd,OAAO,CAACwB,SAAR,CAAkBrB,EAAlB,CAAP;AACD;AAED;;;;;;;;;iCAMoBwB,Q,EAAU;AAC5B,UAAMxB,EAAE,GAAGC,QAAQ,CAACuB,QAAD,EAAW,EAAX,CAAnB;AACA,UAAMG,OAAO,GAAGjC,SAAS,CAAC+B,IAAV,CAAe,UAAC1B,MAAD,EAAS6B,KAAT,EAAmB;AAChD,YAAI7B,MAAM,CAACC,EAAP,KAAcA,EAAlB,EAAsBN,SAAS,CAACmC,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB;AACtB,eAAO7B,MAAM,CAACC,EAAP,KAAcA,EAArB;AACD,OAHe,CAAhB;AAIA,aAAO2B,OAAP;AACD;AAED;;;;;;;;;mCAMsBG,W,EAAa;AACjC,UAAMC,KAAK,GAAGnB,KAAK,CAAC,gBAAD,CAAnB;AACA,UAAI,EAAEkB,WAAW,YAAYE,KAAzB,CAAJ,EAAqC,OAAO,EAAP;AACrC,UAAIF,WAAW,CAACG,IAAZ,CAAiB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACf,MAAN,GAAe,EAAnB;AAAA,OAAtB,CAAJ,EAAkD,MAAMY,KAAN;AAClD,aAAOD,WAAP;AACD;AAED;;;;;;;;;iCAMoBK,S,EAAW;AAC7B,UAAMJ,KAAK,GAAGnB,KAAK,CAAC,cAAD,CAAnB;AACA,UAAI,EAAEuB,SAAS,YAAYH,KAAvB,CAAJ,EAAmC,MAAMD,KAAN;AACnC,UAAI,CAACI,SAAS,CAACC,KAAV,CAAgB,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAAClB,MAAJ,GAAa,CAAjB;AAAA,OAAnB,CAAL,EAA6C,MAAMY,KAAN;AAC7C,aAAOI,SAAP;AACD;AAED;;;;;;;;;mCAMsBG,U,EAAY;AAChC,UAAMP,KAAK,GAAG,IAAInB,KAAJ,CAAU,qBAAV,CAAd;AACA,UAAI,OAAO0B,UAAP,KAAsB,QAA1B,EAAoC,MAAMP,KAAN;AACpC,UAAMd,WAAW,GAAG,IAAIZ,IAAJ,CAASiC,UAAT,CAApB;AACA,UAAI,CAACrB,WAAW,CAACsB,OAAZ,EAAL,EAA4B,MAAMR,KAAN;AAC5B,aAAOd,WAAP;AACD;;;;;;eAGYpB,O","sourcesContent":["import db, { meetupModel } from '../../../db/v1/db';\r\n\r\nconst meetupsDB = db.meetups;\r\n\r\nclass Meetups {\r\n  /**\r\n   * Create meetup in database\r\n   * Assign a unique id to meetup\r\n   * @param {Object} data - http request body\r\n   * @returns {Object} - Meetup object if success\r\n   * @throws {Error} - Error object if fail\r\n   */\r\n  static createMeetup(data) {\r\n    const meetup = {\r\n      id: parseInt(Math.random() * 1000000, 10),\r\n      createdOn: new Date(),\r\n    };\r\n    const propNames = Object.keys(meetupModel);\r\n    propNames.forEach((propName) => {\r\n      if (propName === 'id' || propName === 'createdOn') return; // continue next loop\r\n      if (!data[propName] && propName !== 'images') { // images are optional\r\n        throw Error(`${propName} is empty/invalid`);\r\n      }\r\n      if (propName === 'images') {\r\n        const images = Meetups.validateImages(data[propName]);\r\n        meetup[propName] = images;\r\n        return;\r\n      }\r\n      if (propName === 'tags') {\r\n        const tags = Meetups.validateTags(data[propName]);\r\n        meetup[propName] = tags;\r\n        return;\r\n      }\r\n      if (propName === 'happeningOn') {\r\n        const happeningOn = Meetups.setHappeningOn(data[propName]);\r\n        meetup[propName] = happeningOn;\r\n        return;\r\n      }\r\n      if (data[propName].length < 3) {\r\n        throw Error(`invalid ${propName}`);\r\n      }\r\n      meetup[propName] = data[propName];\r\n    }); // end forEach\r\n    meetupsDB.push(meetup);\r\n    return Meetups.getMeetup(meetup.id);\r\n  }\r\n\r\n  /**\r\n   * Get all meetups in database\r\n   * @returns {Array} - array of Meetup objects\r\n   */\r\n  static getMeetups() {\r\n    return meetupsDB;\r\n  }\r\n\r\n  /**\r\n   * Get all upcoming meetups in database\r\n   * @returns {Array} - array of upcoming Meetup objects\r\n   */\r\n  static getUpcomingMeetups() {\r\n    const upcoming = meetupsDB.filter(meetup => meetup.happeningOn > new Date());\r\n    return upcoming;\r\n  }\r\n\r\n  /**\r\n   * Get a Meetup object in database using a unique id\r\n   * Assign a unique id to Meetup\r\n   * @param {String} idString - http request.params.id\r\n   * @returns {Object} - if Meetup is found\r\n   * @returns {undefined} - if Meetup is not found\r\n   */\r\n  static getMeetup(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const meetup = meetupsDB.find(obj => obj.id === id);\r\n    return meetup;\r\n  }\r\n\r\n  /**\r\n   * Update an existing Meetup in database using a unique id\r\n   * @param {String} idString - http request.params.id\r\n   * @param {String} data - http request.body\r\n   * @returns {Object} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static updateMeetup(idString, data) {\r\n    const id = parseInt(idString, 10);\r\n    const meetup = meetupsDB.find(obj => obj.id === id);\r\n    const propNames = Object.keys(data);\r\n    propNames.forEach((propName) => {\r\n      if (propName === 'id' || propName === 'createdOn') return; // continue next loop\r\n      if (!data[propName] && propName !== 'images') return; // images are optional\r\n      if (propName === 'images') {\r\n        const images = Meetups.validateImages(data[propName]);\r\n        meetup[propName] = images;\r\n        return;\r\n      }\r\n      if (propName === 'tags') {\r\n        const tags = Meetups.validateTags(data[propName]);\r\n        meetup[propName] = tags;\r\n        return;\r\n      }\r\n      if (propName === 'happeningOn') {\r\n        const happeningOn = Meetups.setHappeningOn(data[propName]);\r\n        meetup[propName] = happeningOn;\r\n        return;\r\n      }\r\n      if (data[propName].length < 3) {\r\n        throw Error(`invalid ${propName}`);\r\n      }\r\n      meetup[propName] = data[propName];\r\n    }); // end forEach\r\n    return Meetups.getMeetup(id);\r\n  }\r\n\r\n  /**\r\n   * Delete an existing Meetup in database using a unique id\r\n   * @param {String} idString - http request.params.id\r\n   * @returns {Object} - on success\r\n   * @returns {undefined} - on failure\r\n   */\r\n  static deleteMeetup(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const deleted = meetupsDB.find((meetup, index) => {\r\n      if (meetup.id === id) meetupsDB.splice(index, 1);\r\n      return meetup.id === id;\r\n    });\r\n    return deleted;\r\n  }\r\n\r\n  /**\r\n   * Check if Meetup images inputs are valid\r\n   * @param {Array} imagesArray - images input\r\n   * @returns {Array} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static validateImages(imagesArray) {\r\n    const error = Error('invalid images');\r\n    if (!(imagesArray instanceof Array)) return [];\r\n    if (imagesArray.some(image => image.length < 11)) throw error;\r\n    return imagesArray;\r\n  }\r\n\r\n  /**\r\n   * Check if Meetup tags inputs are valid\r\n   * @param {Array} tagsArray - tags input\r\n   * @returns {Array} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static validateTags(tagsArray) {\r\n    const error = Error('invalid tags');\r\n    if (!(tagsArray instanceof Array)) throw error;\r\n    if (!tagsArray.every(tag => tag.length > 3)) throw error;\r\n    return tagsArray;\r\n  }\r\n\r\n  /**\r\n   * Set date property for meetup objects\r\n   * @param {String} imagesArray - images input\r\n   * @returns {Date} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static setHappeningOn(dateString) {\r\n    const error = new Error('invalid date string');\r\n    if (typeof dateString !== 'string') throw error;\r\n    const happeningOn = new Date(dateString);\r\n    if (!happeningOn.getDate()) throw error;\r\n    return happeningOn;\r\n  }\r\n}\r\n\r\nexport default Meetups;\r\n"],"file":"meetups.js"}