{"version":3,"sources":["../../../../server/api/v1/helpers/users.js"],"names":["userDB","db","users","Users","data","user","id","parseInt","Math","random","propNames","Object","keys","userModel","forEach","propName","Error","registered","Date","isAdmin","push","getUser","idString","find","obj","length","deleted","index","splice"],"mappings":"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","sourcesContent":["import db, { userModel } from '../../../db/v1/db';\r\n\r\nconst userDB = db.users;\r\n\r\nclass Users {\r\n  /**\r\n   * Create user in database\r\n   * Assign a unique id to user\r\n   * @param {Object} data - http request body\r\n   * @returns {Object} - User object if success\r\n   * @throws {Error} - Error object if fail\r\n   */\r\n  static createUser(data) {\r\n    const user = { id: parseInt(Math.random() * 1000000, 10) };\r\n    const propNames = Object.keys(userModel);\r\n    propNames.forEach((propName) => {\r\n      if (propName === 'id' || propName === 'registered' || propName === 'isAdmin') return;\r\n      if (!data[propName] || data[propName] < 2) {\r\n        throw new Error(`${propName} is empty/invalid`);\r\n      }\r\n      user[propName] = data[propName];\r\n    });\r\n    user.registered = new Date();\r\n    user.isAdmin = false;\r\n    userDB.push(user);\r\n    // RETURN NEW USER OBJECT\r\n    return Users.getUser(user.id);\r\n  }\r\n\r\n  /**\r\n   * Get all users in database\r\n   * @returns {Array} - array of user objects\r\n   */\r\n  static getUsers() {\r\n    return userDB;\r\n  }\r\n\r\n  /**\r\n   * Get a User in database using a unique id\r\n   * Assign a unique id to user\r\n   * @param {String} idString - http request.params.id\r\n   * @returns {Object} - if User is found\r\n   * @returns {undefined} - if User is not found\r\n   */\r\n  static getUser(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const user = userDB.find(obj => obj.id === id);\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * Update an existing user in database using a unique id\r\n   * @param {String} idString - http request.params.id\r\n   * @param {String} data - http request.body\r\n   * @returns {Object} - on success\r\n   * @throws {Error} - on failure\r\n   */\r\n  static updateUser(idString, data) {\r\n    const id = parseInt(idString, 10);\r\n    const user = userDB.find(obj => obj.id === id);\r\n    const propNames = Object.keys(data);\r\n    propNames.forEach((propName) => {\r\n      if (!data[propName] || data[propName].length < 2) {\r\n        // THROW EXCEPTION\r\n        throw new Error(`${propName} is empty/invalid`);\r\n      }\r\n      if (propName !== 'id' || propName !== 'createdOn') user[propName] = data[propName];\r\n    });\r\n    return Users.getUser(id);\r\n  }\r\n\r\n  /**\r\n   * Delete an existing user in database using a unique id\r\n   * @param {String} idString - http request.params.id\r\n   * @returns {Object} - on success\r\n   * @returns {undefined} - on failure\r\n   */\r\n  static deleteUser(idString) {\r\n    const id = parseInt(idString, 10);\r\n    const deleted = userDB.find((user, index) => {\r\n      if (user.id === id) userDB.splice(index, 1);\r\n      return user.id === id;\r\n    });\r\n    return deleted;\r\n  }\r\n}\r\n\r\nexport default Users;\r\n"],"file":"users.js"}