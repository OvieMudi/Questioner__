{"version":3,"sources":["../../../../server/api/v1/controllers/usersController.js"],"names":["currentUser","db","users","UsersController","req","res","user","Users","createUser","body","status","json","data","error","message","getUsers","getUser","params","id","modifiedUser","updateUser","deleted","deleteUser","undefined"],"mappings":"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","sourcesContent":["import Users from '../helpers/users';\r\nimport db from '../../../db/v1/db';\r\n\r\n// eslint-disable-next-line import/no-mutable-exports\r\nlet currentUser = db.users[0];\r\n\r\nclass UsersController {\r\n  /**\r\n   * Create new user in database\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {Object} - custom server response with error/success\r\n   */\r\n  static postUser(req, res) {\r\n    try {\r\n      const user = Users.createUser(req.body);\r\n      currentUser = user;\r\n      return res.status(201).json({\r\n        status: 201, data: [user],\r\n      });\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 400, message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all users from database\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {Object} - custom server response with error/success\r\n   */\r\n  static getUsers(req, res) {\r\n    const users = Users.getUsers();\r\n    return res.status(200).json({\r\n      status: 200, data: users,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a users from database using unique id\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {Object} - custom server response with error/success\r\n   */\r\n  static getUser(req, res) {\r\n    const user = Users.getUser(req.params.id);\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        status: 404, message: 'user does not exist',\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200, data: [user],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update user in database using unique id\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {Object} - custom server response with error/success\r\n   */\r\n  static updateUser(req, res) {\r\n    try {\r\n      const modifiedUser = Users.updateUser(req.params.id, req.body);\r\n      if (!modifiedUser) {\r\n        return res.status(404).json({\r\n          status: 404, message: 'user does not exit',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 200, data: [modifiedUser],\r\n      });\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 400, message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete user in database using unique id\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {Object} - custom server response with error/success\r\n   */\r\n  static deleteUser(req, res) {\r\n    const { id } = req.params;\r\n    const deleted = Users.deleteUser(id);\r\n    if (!deleted) {\r\n      return res.status(404).json({\r\n        status: 404, message: 'user does not exist',\r\n      });\r\n    }\r\n    currentUser = undefined;\r\n    return res.status(200).json({\r\n      status: 200, message: 'user deleted',\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersController;\r\nexport { currentUser };\r\n"],"file":"usersController.js"}