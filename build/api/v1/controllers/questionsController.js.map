{"version":3,"sources":["../../../../server/api/v1/controllers/questionsController.js"],"names":["questionsController","req","res","question","Questions","createQuestion","body","status","json","data","error","message","questions","getQuestions","getQuestion","params","id","updatedQuestion","updateQuestion","deleted","deleteQuestion","upvoted","upvoteQuestion","downvoted","downvoteQuestion"],"mappings":"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","sourcesContent":["import Questions from '../helpers/questions';\r\n\r\nclass questionsController {\r\n  /**\r\n   * Create new question object in db\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static postQuestion(req, res) {\r\n    try {\r\n      const question = Questions.createQuestion(req.body);\r\n      return res.status(201).json({\r\n        status: 201, data: [question],\r\n      });\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 400, error: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all questions objects in db\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static getQuestions(req, res) {\r\n    const questions = Questions.getQuestions();\r\n    return res.status(200).json({\r\n      status: 200, data: questions,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get one question objects in db\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static getQuestion(req, res) {\r\n    const question = Questions.getQuestion(req.params.id);\r\n    if (!question) {\r\n      return res.status(404).json({\r\n        status: 200, error: 'question does not exist',\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200, data: [question],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update a question object in database using a unique id\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static updateQuestion(req, res) {\r\n    try {\r\n      const updatedQuestion = Questions.updateQuestion(req.params.id, req.body);\r\n      if (!updatedQuestion) {\r\n        return res.status(404).json({\r\n          status: 404, error: 'question does not exist',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 200, data: [updatedQuestion],\r\n      });\r\n    } catch (error) {\r\n      return res.status(400).json({\r\n        status: 400, error: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a question object from db\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static deleteQuestion(req, res) {\r\n    const deleted = Questions.deleteQuestion(req.params.id);\r\n    if (!deleted) {\r\n      res.status(404).json({\r\n        status: 404, error: 'question does not exist',\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200, message: 'question deleted',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Increment votes of a question object\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static upvoteQuestion(req, res) {\r\n    const upvoted = Questions.upvoteQuestion(req.params.id);\r\n    if (!upvoted) {\r\n      return res.status(404).json({\r\n        status: 404, error: 'question does not exist',\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200, data: [upvoted],\r\n    });\r\n  }\r\n\r\n/**\r\n   * Decrement votes of a question object\r\n   * @param {Object} req - server request\r\n   * @param {Object} res - server response\r\n   * @returns {JSON} - custom server response with error/success\r\n   */\r\n  static downvoteQuestion(req, res) {\r\n    const downvoted = Questions.downvoteQuestion(req.params.id);\r\n    if (!downvoted) {\r\n      return res.status(404).json({\r\n        status: 404, error: 'question does not exist',\r\n      });\r\n    }\r\n    return res.status(200).json({\r\n      status: 200, data: [downvoted],\r\n    });\r\n  }\r\n}\r\n\r\nexport default questionsController;\r\n"],"file":"questionsController.js"}